import Foundation

extension IteratorProtocol where Element == UInt8 {
  /**
   Returns bytes, up to the specified maximum length, generated by repeatedly calling next on this iterator.

   If the iterator is exhausted before maxLength bytes have been read, the bytes read thus far will be returned.

   - Parameter maxLength: The maximum number of bytes to return. maxLength must be greater than or equal to zero.
   */
  mutating func next(maxLength: Int) -> Data {
    precondition(maxLength >= 0, "maxLength must be greater than or equal to zero. Instead, it was \(maxLength).")

    var data = Data(capacity: maxLength)
    for _ in 0..<maxLength {
      guard let byte = next() else {
        break
      }
      data.append(byte)
    }
    return data
  }
}
