// Copyright 2019-present the MySqlConnector authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation

extension IteratorProtocol where Element == UInt8 {
  /**
   Returns bytes, up to the specified maximum length, generated by repeatedly calling next on this iterator.

   If the iterator is exhausted before maxLength bytes have been read, the bytes read thus far will be returned.

   - Parameter maxLength: The maximum number of bytes to return. maxLength must be greater than or equal to zero.
   */
  public mutating func next(maxLength: Int) -> [UInt8] {
    precondition(maxLength >= 0, "maxLength must be greater than or equal to zero. Instead, it was \(maxLength).")

    var bytes = [UInt8]()
    for _ in 0..<maxLength {
      guard let byte = next() else {
        break
      }
      bytes.append(byte)
    }
    return bytes
  }
}
